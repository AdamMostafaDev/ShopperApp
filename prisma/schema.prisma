generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication support
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  phone     String?
  country   String?
  password  String?  // For password-based auth
  
  // Auth fields
  role               String    @default("USER")
  emailVerified      DateTime? @map("email_verified")
  twoFactorEnabled   Boolean   @default(false) @map("two_factor_enabled")
  loginAttempts      Int       @default(0) @map("login_attempts")
  lockedUntil        DateTime? @map("locked_until")
  lastLoginAt        DateTime? @map("last_login_at")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orders    Order[]
  addresses Address[]
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Business models
model Order {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  productUrl  String      @map("product_url")
  productName String      @map("product_name")
  price       Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Address {
  id          String  @id @default(cuid())
  userId      String  @map("user_id")
  name        String
  street1     String  @map("street_1")
  street2     String? @map("street_2")
  city        String
  state       String?
  postalCode  String  @map("postal_code")
  country     String
  isDefault   Boolean @default(false) @map("is_default")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
