generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(cuid())
  firstName          String?      @map("first_name")
  lastName           String?      @map("last_name")
  email              String       @unique
  email_lower        String?      @unique
  phone              String?
  country            String?
  emailVerified      DateTime?    @map("email_verified")
  image              String?
  role               Role         @default(USER)
  password           String?
  reset_token        String?      @unique
  reset_token_expiry DateTime?
  two_factor_secret  String?
  twoFactorEnabled   Boolean      @default(false) @map("two_factor_enabled")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  lastLoginAt        DateTime?    @map("last_login_at")
  loginAttempts      Int          @default(0) @map("login_attempts")
  lockedUntil        DateTime?    @map("locked_until")
  accounts           Account[]
  addresses          Address[]
  audit_logs         audit_logs[]
  orders             Order[]
  sessions           Session[]

  @@index([email_lower])
  @@index([reset_token])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Order {
  id                 String            @id @default(cuid())
  userId             String            @map("user_id")
  stripeCheckoutId   String?           @map("stripe_checkout_id")
  stripePaymentIntentId String?        @map("stripe_payment_intent_id")
  
  // Cart details
  items              Json              // Cart items with products, quantities, prices
  subtotal           Decimal           @db.Decimal(10, 2)
  shippingCost       Decimal           @db.Decimal(10, 2) @map("shipping_cost")
  serviceCharge      Decimal           @db.Decimal(10, 2) @map("service_charge")
  tax                Decimal           @db.Decimal(10, 2) @default(0)
  totalAmount        Decimal           @db.Decimal(10, 2) @map("total_amount")
  totalWeight        Decimal           @db.Decimal(10, 3) @map("total_weight") // kg
  
  // Order management
  status             OrderStatus       @default(PENDING)
  paymentStatus      PaymentStatus     @default(PENDING) @map("payment_status")
  fulfillmentStatus  FulfillmentStatus @default(PENDING) @map("fulfillment_status")
  
  // Customer info
  customerEmail      String            @map("customer_email")
  customerPhone      String?           @map("customer_phone")
  shippingAddress    Json              @map("shipping_address") // Address details
  
  // Timestamps
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  cancelledAt        DateTime?         @map("cancelled_at")
  refundDeadline     DateTime?         @map("refund_deadline") // 24 hours from creation
  
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Address {
  id         String  @id @default(cuid())
  userId     String  @map("user_id")
  name       String
  street1    String  @map("street_1")
  street2    String? @map("street_2")
  city       String
  state      String?
  postalCode String  @map("postal_code")
  country    String
  isDefault  Boolean @default(false) @map("is_default")
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model audit_logs {
  id         String   @id
  user_id    String?
  action     String
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  users      User?    @relation(fields: [user_id], references: [id])

  @@index([action])
  @@index([created_at])
  @@index([user_id])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  VENDOR
}
