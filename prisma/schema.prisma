generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @id @default(autoincrement())
  email              String       @unique
  email_lower        String?      @unique
  firstName          String?      @map("first_name")
  lastName           String?      @map("last_name")
  phone              String?
  country            String?
  image              String?
  role               Role         @default(USER)
  password           String?
  emailVerified      DateTime?    @map("email_verified")
  reset_token        String?      @unique
  reset_token_expiry DateTime?
  two_factor_secret  String?
  twoFactorEnabled   Boolean      @default(false) @map("two_factor_enabled")
  loginAttempts      Int          @default(0) @map("login_attempts")
  lockedUntil        DateTime?    @map("locked_until")
  lastLoginAt        DateTime?    @map("last_login_at")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  accounts           Account[]
  addresses          Address[]
  audit_logs         audit_logs[]
  orders             Order[]
  sessions           Session[]

  @@index([email_lower])
  @@index([reset_token])
  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Order {
  id                        Int               @id @default(autoincrement())
  userId                    Int               @map("user_id")
  orderNumber               String            @unique
  status                    OrderStatus       @default(PENDING)
  fulfillmentStatus         FulfillmentStatus @default(PENDING) @map("fulfillment_status")
  paymentStatus             PaymentStatus     @default(PENDING) @map("payment_status")
  customerEmail             String            @map("customer_email")
  customerPhone             String?           @map("customer_phone")
  items                     Json
  shippingAddress           Json              @map("shipping_address")
  totalWeight               Decimal           @map("total_weight") @db.Decimal(10, 3)
  currency                  String?           @default("BDT")
  exchangeRate              Decimal?          @map("exchange_rate") @db.Decimal(10, 4)
  exchangeRateProvider      String?           @default("exchange-api") @map("exchange_rate_provider")
  productCostBdt            Decimal           @map("product_cost_bdt") @db.Decimal(10, 2)
  productCostUsd            Decimal?          @map("product_cost_usd") @db.Decimal(10, 2)
  serviceChargeBdt          Decimal           @map("service_charge_bdt") @db.Decimal(10, 2)
  serviceChargeUsd          Decimal?          @map("service_charge_usd") @db.Decimal(10, 2)
  shippingCostBdt           Decimal           @map("shipping_cost_bdt") @db.Decimal(10, 2)
  taxBdt                    Decimal           @default(0) @map("tax_bdt") @db.Decimal(10, 2)
  taxUsd                    Decimal?          @map("tax_usd") @db.Decimal(10, 2)
  totalAmountBdt            Decimal           @map("total_amount_bdt") @db.Decimal(10, 2)
  totalAmountUsd            Decimal?          @map("total_amount_usd") @db.Decimal(10, 2)
  stripeCheckoutId          String?           @map("stripe_checkout_id")
  stripePaymentIntentId     String?           @map("stripe_payment_intent_id")
  orderPlacedStatus         TrackingStatus    @default(COMPLETE) @map("order_placed_status")
  paymentConfirmationStatus TrackingStatus    @default(PROCESSING) @map("payment_confirmation_status")
  shippedStatus             TrackingStatus    @default(PENDING) @map("shipped_status")
  outForDeliveryStatus      TrackingStatus    @default(PENDING) @map("out_for_delivery_status")
  deliveredStatus           TrackingStatus    @default(PENDING) @map("delivered_status")
  refundDeadline            DateTime?         @map("refund_deadline")
  cancelledAt               DateTime?         @map("cancelled_at")
  createdAt                 DateTime          @default(now()) @map("created_at")
  updatedAt                 DateTime          @updatedAt @map("updated_at")
  user                      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Address {
  id         Int     @id @default(autoincrement())
  userId     Int     @map("user_id")
  name       String
  street1    String  @map("street_1")
  street2    String? @map("street_2")
  city       String
  state      String?
  postalCode String  @map("postal_code")
  country    String
  isDefault  Boolean @default(false) @map("is_default")
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model audit_logs {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  action     String
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  users      User?    @relation(fields: [user_id], references: [id])

  @@index([action])
  @@index([created_at])
  @@index([user_id])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  VENDOR
}

enum TrackingStatus {
  PENDING
  PROCESSING
  COMPLETE
}
